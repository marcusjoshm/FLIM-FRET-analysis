#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test script to examine the contents of .npz files generated by the FLIM-FRET analysis pipeline.
This script helps understand the data structure and contents of the processed files.
"""

import numpy as np
import os
import glob
import matplotlib.pyplot as plt
from pathlib import Path

def examine_npz_file(npz_path):
    """
    Examine a single .npz file and print its contents.
    
    Args:
        npz_path (str): Path to the .npz file
    """
    print(f"\n{'='*60}")
    print(f"Examining: {os.path.basename(npz_path)}")
    print(f"Full path: {npz_path}")
    print(f"{'='*60}")
    
    try:
        # Load the .npz file
        data = np.load(npz_path)
        
        # Print basic information
        print(f"File size: {os.path.getsize(npz_path) / (1024*1024):.2f} MB")
        print(f"Number of arrays: {len(data.files)}")
        print(f"Array names: {list(data.files)}")
        
        # Examine each array in the file
        for array_name in data.files:
            array = data[array_name]
            print(f"\n--- Array: '{array_name}' ---")
            print(f"  Shape: {array.shape}")
            print(f"  Data type: {array.dtype}")
            print(f"  Size: {array.size} elements")
            print(f"  Memory usage: {array.nbytes / (1024*1024):.2f} MB")
            
            # Print statistics for numerical arrays
            if np.issubdtype(array.dtype, np.number):
                # Handle potential NaN values
                valid_data = array[~np.isnan(array)] if array.size > 0 else array
                if valid_data.size > 0:
                    print(f"  Min value: {np.min(valid_data):.6f}")
                    print(f"  Max value: {np.max(valid_data):.6f}")
                    print(f"  Mean value: {np.mean(valid_data):.6f}")
                    print(f"  Std deviation: {np.std(valid_data):.6f}")
                    print(f"  Non-zero elements: {np.count_nonzero(valid_data)}")
                    print(f"  NaN elements: {np.count_nonzero(np.isnan(array))}")
                else:
                    print(f"  No valid numerical data")
            
            # Print first few elements for small arrays or sample for large arrays
            if array.size <= 20:
                print(f"  Values: {array}")
            elif len(array.shape) == 1:
                print(f"  First 10 values: {array[:10]}")
            elif len(array.shape) == 2:
                print(f"  First 3x3 values:\n{array[:3, :3]}")
            elif len(array.shape) == 3:
                print(f"  Shape breakdown: {array.shape[0]} frames, {array.shape[1]}x{array.shape[2]} pixels")
                print(f"  First frame (3x3 sample):\n{array[0, :3, :3]}")
        
        data.close()
        return True
        
    except Exception as e:
        print(f"Error reading {npz_path}: {e}")
        return False

def visualize_npz_data(npz_path, save_plots=False):
    """
    Create visualizations of the data in the .npz file.
    
    Args:
        npz_path (str): Path to the .npz file
        save_plots (bool): Whether to save plots as images
    """
    try:
        data = np.load(npz_path)
        
        # Create a figure with subplots
        fig_size = min(len(data.files), 6)  # Limit to 6 subplots max
        fig, axes = plt.subplots(2, 3, figsize=(15, 10))
        axes = axes.flatten()
        
        plot_count = 0
        
        for i, array_name in enumerate(data.files):
            if plot_count >= 6:  # Limit to 6 plots
                break
                
            array = data[array_name]
            
            # Only plot 2D arrays (images)
            if len(array.shape) == 2 and np.issubdtype(array.dtype, np.number):
                im = axes[plot_count].imshow(array, cmap='viridis')
                axes[plot_count].set_title(f'{array_name}\nShape: {array.shape}')
                axes[plot_count].set_xlabel('X pixels')
                axes[plot_count].set_ylabel('Y pixels')
                plt.colorbar(im, ax=axes[plot_count])
                plot_count += 1
            
            # Plot first frame of 3D arrays
            elif len(array.shape) == 3 and np.issubdtype(array.dtype, np.number):
                im = axes[plot_count].imshow(array[0], cmap='viridis')
                axes[plot_count].set_title(f'{array_name} (frame 0)\nShape: {array.shape}')
                axes[plot_count].set_xlabel('X pixels')
                axes[plot_count].set_ylabel('Y pixels')
                plt.colorbar(im, ax=axes[plot_count])
                plot_count += 1
        
        # Hide unused subplots
        for i in range(plot_count, 6):
            axes[i].set_visible(False)
        
        plt.tight_layout()
        plt.suptitle(f'NPZ File Contents: {os.path.basename(npz_path)}', y=1.02)
        
        if save_plots:
            plot_path = npz_path.replace('.npz', '_visualization.png')
            plt.savefig(plot_path, dpi=150, bbox_inches='tight')
            print(f"Plot saved to: {plot_path}")
        
        plt.show()
        data.close()
        
    except Exception as e:
        print(f"Error visualizing {npz_path}: {e}")

def scan_npz_directory(npz_dir):
    """
    Scan a directory for .npz files and examine them.
    
    Args:
        npz_dir (str): Directory containing .npz files
    """
    if not os.path.exists(npz_dir):
        print(f"Directory not found: {npz_dir}")
        return
    
    # Find all .npz files
    npz_files = glob.glob(os.path.join(npz_dir, "**/*.npz"), recursive=True)
    
    if not npz_files:
        print(f"No .npz files found in {npz_dir}")
        return
    
    print(f"Found {len(npz_files)} .npz files in {npz_dir}")
    
    # Examine each file
    for npz_file in sorted(npz_files):
        examine_npz_file(npz_file)
    
    # Ask user if they want to visualize any files
    print(f"\n{'='*60}")
    print("Visualization Options:")
    for i, npz_file in enumerate(npz_files):
        print(f"{i+1}. {os.path.basename(npz_file)}")
    
    try:
        choice = input(f"\nEnter file number to visualize (1-{len(npz_files)}) or 'q' to quit: ")
        if choice.lower() != 'q':
            file_idx = int(choice) - 1
            if 0 <= file_idx < len(npz_files):
                visualize_npz_data(npz_files[file_idx], save_plots=True)
            else:
                print("Invalid file number")
    except (ValueError, KeyboardInterrupt):
        print("Exiting...")

def main():
    """
    Main function to run the NPZ file examination.
    """
    print("NPZ File Examination Tool")
    print("=" * 40)
    
    # Default directory (can be changed)
    default_dir = "/Volumes/NX-01-A/FLIM_results/npz_datasets"
    
    # Get directory from user or use default
    npz_dir = input(f"Enter NPZ directory path (default: {default_dir}): ").strip()
    if not npz_dir:
        npz_dir = default_dir
    
    # Scan and examine files
    scan_npz_directory(npz_dir)

if __name__ == "__main__":
    main() 